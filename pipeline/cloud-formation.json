{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters": {
    "ClusterName": {
      "Type": "String",
      "Default": "xianbridal",
      "Description": "ECS cluster name."
    },
    "GitHubRepositoryId": {
      "Type": "String",
      "Default": "Intai/xianbridal-co-nz",
      "Description": "GitHub repository."
    },
    "VpcId": {
      "Type": "String",
      "Default": "vpc-07d198f88bb94061c",
      "Description": "The identifier of the virtual private cloud (VPC)."
    },
    "Subnet1": {
      "Type": "String",
      "Default": "subnet-038eb3c816a53d4c1",
      "Description": "One subnet per Availability Zone."
    },
    "Subnet2": {
      "Type": "String",
      "Default": "subnet-0b06cfa7af1f9b258",
      "Description": "One subnet per Availability Zone."
    },
    "CertificateArn": {
      "Type": "String",
      "Default": "arn:aws:acm:us-east-1:501045672667:certificate/cbcea9e5-ff95-4a85-9425-bf4bdad48452",
      "Description": "The SSL server certificate."
    }
  },
  "Conditions": {
    "HasCertificateArn": {
      "Fn::Not": [{
        "Fn::Equals": ["", { "Ref": "CertificateArn" }]
      }]
    }
  },
  "Resources": {
    "CodeBuildServiceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": {
          "Fn::Join": [
            "-", [
              "codebuild",
              { "Ref": "AWS::StackName" },
              "service-role"
            ]
          ]
        },
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {
              "Service": "codebuild.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
          }]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess"
        ],
        "MaxSessionDuration": 3600,
        "Path": "/",
        "Policies": [{
          "PolicyName": "CodeBuildBasePolicy",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Resource": [{
                "Fn::Join": [
                  ":", [
                    "arn:aws:logs",
                    { "Ref": "AWS::Region" },
                    { "Ref": "AWS::AccountId" },
                    "log-group:/aws/codebuild/*"
                  ]
                ]
              }],
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ]
            }]
          }
        }]
      }
    },
    "CodeBuildSourceCredential": {
      "Type": "AWS::CodeBuild::SourceCredential",
      "Properties": {
        "Token": "{{resolve:secretsmanager:github:SecretString:token}}",
        "ServerType": "GITHUB",
        "AuthType": "PERSONAL_ACCESS_TOKEN"
      }
    },
    "CodeBuild": {
      "Type": "AWS::CodeBuild::Project",
      "DependsOn": [
        "CodeBuildSourceCredential"
      ],
      "Properties": {
        "Name": {
          "Ref": "AWS::StackName"
        },
        "Artifacts": {
          "Type": "NO_ARTIFACTS"
        },
        "Environment": {
          "Type": "LINUX_CONTAINER",
          "Image": "aws/codebuild/standard:4.0",
          "ComputeType": "BUILD_GENERAL1_SMALL",
          "EnvironmentVariables": [{
            "Name": "ACCOUNT_ID",
            "Type": "PLAINTEXT",
            "Value": {
              "Ref": "AWS::AccountId"
            }
          }],
          "PrivilegedMode": true,
          "ImagePullCredentialsType": "CODEBUILD"
        },
        "ServiceRole": {
          "Ref": "CodeBuildServiceRole"
        },
        "Source": {
          "Type": "GITHUB",
          "Location": {
            "Fn::Join": [
              "", [
                "https://github.com/",
                { "Ref": "GitHubRepositoryId" },
                ".git"
              ]
            ]
          },
          "GitCloneDepth": 1,
          "GitSubmodulesConfig": {
            "FetchSubmodules": false
          },
          "BuildSpec": "pipeline/buildspec.yml",
          "ReportBuildStatus": false,
          "InsecureSsl": false
        },
        "Triggers": {
          "Webhook": true,
          "FilterGroups": [
            [{
              "Type": "EVENT",
              "Pattern": "PUSH",
              "ExcludeMatchedPattern": false
            }, {
              "Type": "HEAD_REF",
              "Pattern": "(refs/heads/nginx|refs/heads/master|refs/heads/rc/|refs/tags/release)",
              "ExcludeMatchedPattern": false
            }]
          ]
        },
        "Visibility": "PRIVATE",
        "LogsConfig": {
          "CloudWatchLogs": {
            "Status": "ENABLED"
          },
          "S3Logs": {
            "Status": "DISABLED",
            "EncryptionDisabled": false
          }
        }
      }
    },
    "ECRNode": {
      "Type": "AWS::ECR::Repository",
      "Properties": {
        "RepositoryName": {
          "Fn::Join": [
            "-", [
              { "Ref": "AWS::StackName" },
              "nodejs"
            ]
          ]
        },
        "ImageTagMutability": "MUTABLE",
        "ImageScanningConfiguration": {
          "ScanOnPush": false
        },
        "EncryptionConfiguration": {
          "EncryptionType": "AES256"
        },
        "LifecyclePolicy": {
          "LifecyclePolicyText": "{\"rules\":[{\"rulePriority\":1,\"description\":\"Branch\",\"selection\":{\"tagStatus\":\"tagged\",\"tagPrefixList\":[\"branch-commit-\"],\"countType\":\"imageCountMoreThan\",\"countNumber\":2},\"action\":{\"type\":\"expire\"}}]}",
          "RegistryId": {
            "Ref": "AWS::AccountId"
          }
        }
      }
    },
    "ECRNginx": {
      "Type": "AWS::ECR::Repository",
      "Properties": {
        "RepositoryName": {
          "Fn::Join": [
            "-", [
              { "Ref": "AWS::StackName" },
              "nginx"
            ]
          ]
        },
        "ImageTagMutability": "MUTABLE",
        "ImageScanningConfiguration": {
          "ScanOnPush": false
        },
        "EncryptionConfiguration": {
          "EncryptionType": "AES256"
        },
        "LifecyclePolicy": {
          "LifecyclePolicyText": "{\"rules\":[{\"rulePriority\":1,\"description\":\"Branch\",\"selection\":{\"tagStatus\":\"tagged\",\"tagPrefixList\":[\"branch-commit-\"],\"countType\":\"imageCountMoreThan\",\"countNumber\":2},\"action\":{\"type\":\"expire\"}}]}",
          "RegistryId": {
            "Ref": "AWS::AccountId"
          }
        }
      }
    },
    "SecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": {
          "Ref": "AWS::StackName"
        },
        "GroupName": {
          "Ref": "AWS::StackName"
        },
        "SecurityGroupEgress": [{
          "CidrIp": "0.0.0.0/0",
          "IpProtocol": "-1"
        }],
        "SecurityGroupIngress": [{
          "CidrIp": "0.0.0.0/0",
          "FromPort": 80,
          "IpProtocol": "tcp",
          "ToPort": 80
        }, {
          "CidrIp": "0.0.0.0/0",
          "FromPort": 443,
          "IpProtocol": "tcp",
          "ToPort": 443
        }],
        "VpcId": {
          "Ref": "VpcId"
        }
      }
    },
    "LoadBalancer": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "Name": {
          "Ref": "AWS::StackName"
        },
        "IpAddressType": "ipv4",
        "Scheme": "internet-facing",
        "SecurityGroups": [{
          "Ref": "SecurityGroup"
        }],
        "Subnets": [{
          "Ref": "Subnet1"
        }, {
          "Ref": "Subnet2"
        }],
        "Type": "application"
      }
    },
    "LoadBalancerListener443": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "Certificates": {
          "Fn::If" : [
            "HasCertificateArn",
            [{
              "CertificateArn": {
                "Ref": "CertificateArn"
              }
            }],
            { "Ref": "AWS::NoValue" }
          ]
        },
        "DefaultActions": [{
          "Type": "forward",
          "TargetGroupArn": {
            "Ref": "TargetGroup1"
          },
          "Order": 1,
          "ForwardConfig": {
            "TargetGroups": [{
              "TargetGroupArn": {
                "Ref": "TargetGroup1"
              },
              "Weight": 1
            }],
            "TargetGroupStickinessConfig": {
              "Enabled": false
            }
          }
        }],
        "LoadBalancerArn": {
          "Ref": "LoadBalancer"
        },
        "Port": 443,
        "Protocol": {
          "Fn::If" : [
            "HasCertificateArn",
            "HTTPS",
            "HTTP"
          ]
        },
        "SslPolicy": {
          "Fn::If" : [
            "HasCertificateArn",
            "ELBSecurityPolicy-2016-08",
            { "Ref": "AWS::NoValue" }
          ]
        }
      }
    },
    "LoadBalancerListener80": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "DefaultActions": [{
          "Type": "redirect",
          "Order": 1,
          "RedirectConfig": {
            "Protocol": "HTTPS",
            "Port": "443",
            "Host": "#{host}",
            "Path": "/#{path}",
            "Query": "#{query}",
            "StatusCode": "HTTP_301"
          }
        }],
        "LoadBalancerArn": {
          "Ref": "LoadBalancer"
        },
        "Port": 80,
        "Protocol": "HTTP"
      }
    },
    "TargetGroup1": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "Name": {
          "Fn::Join": [
            "-", [
              { "Ref": "AWS::StackName" },
              "1"
            ]
          ]
        },
        "HealthCheckEnabled": true,
        "HealthCheckIntervalSeconds": 30,
        "HealthCheckPath": "/",
        "HealthCheckPort": "traffic-port",
        "HealthCheckProtocol": "HTTP",
        "HealthCheckTimeoutSeconds": 5,
        "HealthyThresholdCount": 5,
        "IpAddressType": "ipv4",
        "Matcher": {
          "HttpCode": "200"
        },
        "Port": 80,
        "Protocol": "HTTP",
        "ProtocolVersion": "HTTP1",
        "TargetType": "ip",
        "UnhealthyThresholdCount": 2,
        "VpcId": {
          "Ref": "VpcId"
        }
      }
    },
    "TargetGroup2": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "Name": {
          "Fn::Join": [
            "-", [
              { "Ref": "AWS::StackName" },
              "2"
            ]
          ]
        },
        "HealthCheckEnabled": true,
        "HealthCheckIntervalSeconds": 30,
        "HealthCheckPath": "/",
        "HealthCheckPort": "traffic-port",
        "HealthCheckProtocol": "HTTP",
        "HealthCheckTimeoutSeconds": 5,
        "HealthyThresholdCount": 5,
        "IpAddressType": "ipv4",
        "Matcher": {
          "HttpCode": "200"
        },
        "Port": 80,
        "Protocol": "HTTP",
        "ProtocolVersion": "HTTP1",
        "TargetType": "ip",
        "UnhealthyThresholdCount": 2,
        "VpcId": {
          "Ref": "VpcId"
        }
      }
    },
    "ECSCluster": {
      "Type": "AWS::ECS::Cluster",
      "Properties": {
        "ClusterName": {
          "Ref": "ClusterName"
        },
        "CapacityProviders": [
          "FARGATE_SPOT",
          "FARGATE"
        ],
        "ClusterSettings": [{
          "Name": "containerInsights",
          "Value": "enabled"
        }]
      }
    },
    "ECSService": {
      "Type": "AWS::ECS::Service",
      "DependsOn": [
        "LoadBalancerListener443",
        "LoadBalancerListener80"
      ],
      "Properties": {
        "ServiceName": {
          "Ref": "AWS::StackName"
        },
        "Cluster": {
          "Ref": "ECSCluster"
        },
        "DeploymentConfiguration": {
          "MaximumPercent": 200,
          "MinimumHealthyPercent": 1
        },
        "DeploymentController": {
          "Type": "CODE_DEPLOY"
        },
        "DesiredCount": 1,
        "EnableECSManagedTags": true,
        "EnableExecuteCommand": false,
        "HealthCheckGracePeriodSeconds": 0,
        "LaunchType": "FARGATE",
        "LoadBalancers": [{
          "TargetGroupArn": {
            "Ref": "TargetGroup1"
          },
          "ContainerName": "nginx",
          "ContainerPort": 80
        }],
        "NetworkConfiguration": {
          "AwsvpcConfiguration": {
            "Subnets": [{
              "Ref": "Subnet1"
            }],
            "SecurityGroups": [{
              "Ref": "SecurityGroup"
            }],
            "AssignPublicIp": "ENABLED"
          }
        },
        "PlatformVersion": "1.4.0",
        "SchedulingStrategy": "REPLICA",
        "TaskDefinition": {
          "Ref": "ECSTaskDefinition"
        }
      }
    },
    "ECSTaskExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": "ecsTaskExecutionRole",
        "AssumeRolePolicyDocument": {
          "Version": "2008-10-17",
          "Statement": [{
            "Sid": "",
            "Effect": "Allow",
            "Principal": {
              "Service": "ecs-tasks.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
          }]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
        ],
        "MaxSessionDuration": 3600,
        "Path": "/"
      }
    },
    "ECSTaskDefinition": {
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "Family": {
          "Ref": "AWS::StackName"
        },
        "ContainerDefinitions":  [{
          "Name": "nginx",
          "Image": "public.ecr.aws/nginx/nginx",
          "PortMappings": [{
            "ContainerPort": 80,
            "HostPort": 80,
            "Protocol": "tcp"
          }],
          "Essential": true
        }],
        "Cpu": "256",
        "ExecutionRoleArn": {
          "Fn::GetAtt": ["ECSTaskExecutionRole", "Arn"]
        },
        "Memory": "512",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE"
        ]
      }
    },
    "CodePipelineServiceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": {
          "Fn::Join": [
            "-", [
              "codepipeline",
              { "Ref": "AWS::StackName" },
              "service-role"
            ]
          ]
        },
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {
              "Service": [
                "codepipeline.amazonaws.com"
              ]
            },
            "Action": "sts:AssumeRole"
          }]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess"
        ],
        "MaxSessionDuration": 3600,
        "Path": "/",
        "Policies": [{
          "PolicyName": "CodePipelineBasePolicy",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
              "Action": [
                "iam:PassRole"
              ],
              "Condition": {
                "StringEqualsIfExists": {
                  "iam:PassedToService": [
                    "cloudformation.amazonaws.com",
                    "ecs-tasks.amazonaws.com"
                  ]
                }
              },
              "Effect": "Allow",
              "Resource": "*"
            }, {
              "Action": [
                "codedeploy:CreateDeployment",
                "codedeploy:GetApplication",
                "codedeploy:GetApplicationRevision",
                "codedeploy:GetDeployment",
                "codedeploy:GetDeploymentConfig",
                "codedeploy:RegisterApplicationRevision"
              ],
              "Effect": "Allow",
              "Resource": "*"
            }, {
              "Action": [
                "codestar-connections:UseConnection"
              ],
              "Effect": "Allow",
              "Resource": "*"
            }, {
              "Action": [
                "elasticloadbalancing:*",
                "autoscaling:*",
                "cloudwatch:*",
                "s3:*",
                "sns:*",
                "cloudformation:*",
                "codepipeline:*",
                "ecs:*"
              ],
              "Effect": "Allow",
              "Resource": "*"
            }, {
              "Action": [
                "lambda:InvokeFunction",
                "lambda:ListFunctions"
              ],
              "Resource": "*",
              "Effect": "Allow"
            }, {
              "Action": [
                "cloudformation:CreateStack",
                "cloudformation:DeleteStack",
                "cloudformation:DescribeStacks",
                "cloudformation:UpdateStack",
                "cloudformation:CreateChangeSet",
                "cloudformation:DeleteChangeSet",
                "cloudformation:DescribeChangeSet",
                "cloudformation:ExecuteChangeSet",
                "cloudformation:SetStackPolicy",
                "cloudformation:ValidateTemplate"
              ],
              "Resource": "*",
              "Effect": "Allow"
            }, {
              "Action": [
                "servicecatalog:ListProvisioningArtifacts",
                "servicecatalog:CreateProvisioningArtifact",
                "servicecatalog:DescribeProvisioningArtifact",
                "servicecatalog:DeleteProvisioningArtifact",
                "servicecatalog:UpdateProduct"
              ],
              "Effect": "Allow",
              "Resource": "*"
            }, {
              "Action": [
                "ecr:DescribeImages"
              ],
              "Effect": "Allow",
              "Resource": "*"
            }, {
              "Action": [
                "states:DescribeExecution",
                "states:DescribeStateMachine",
                "states:StartExecution"
              ],
              "Effect": "Allow",
              "Resource": "*"
            }, {
              "Action": [
                "appconfig:StartDeployment",
                "appconfig:StopDeployment",
                "appconfig:GetDeployment"
              ],
              "Effect": "Allow",
              "Resource": "*"
            }]
          }
        }]
      }
    },
    "CodePipelineSourceConnection": {
      "Type": "AWS::CodeStarConnections::Connection",
      "Properties": {
        "ConnectionName": {
          "Ref": "AWS::StackName"
        },
        "ProviderType": "GitHub"
      }
    },
    "CodePipelineS3Bucket": {
      "Type" : "AWS::S3::Bucket",
      "Properties" : {
        "BucketName" : {
          "Fn::Join": [
            "-", [
              "codepipeline",
              { "Ref": "AWS::Region" },
              { "Ref": "AWS::StackName" }
            ]
          ]
        },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls" : true,
          "BlockPublicPolicy" : true,
          "IgnorePublicAcls" : true,
          "RestrictPublicBuckets" : true
        }
      }
    },
    "CodePipeline": {
      "Type": "AWS::CodePipeline::Pipeline",
      "Properties": {
        "Name": {
          "Ref": "AWS::StackName"
        },
        "ArtifactStore": {
          "Type": "S3",
          "Location": {
            "Ref": "CodePipelineS3Bucket"
          }
        },
        "RoleArn": {
          "Fn::GetAtt": ["CodePipelineServiceRole", "Arn"]
        },
        "Stages": [{
          "Name": "Source",
          "Actions": [{
            "Name": "NginxImage",
            "ActionTypeId": {
              "Category": "Source",
              "Owner": "AWS",
              "Provider": "ECR",
              "Version": "1"
            },
            "RunOrder": 1,
            "Configuration": {
              "ImageTag": "nginx",
              "RepositoryName": {
                "Fn::Join": [
                  "-", [
                    { "Ref": "AWS::StackName" },
                    "nginx"
                  ]
                ]
              }
            },
            "OutputArtifacts": [{
              "Name": "NginxImage"
            }],
            "Region": {
              "Ref": "AWS::Region"
            }
          }, {
            "Name": "NodejsImage",
            "ActionTypeId": {
              "Category": "Source",
              "Owner": "AWS",
              "Provider": "ECR",
              "Version": "1"
            },
            "RunOrder": 1,
            "Configuration": {
              "ImageTag": "master",
              "RepositoryName": {
                "Fn::Join": [
                  "-", [
                    { "Ref": "AWS::StackName" },
                    "nodejs"
                  ]
                ]
              }
            },
            "OutputArtifacts": [{
              "Name": "NodejsImage"
            }],
            "Region": {
              "Ref": "AWS::Region"
            }
          }, {
            "Name": "SourceCode",
            "ActionTypeId": {
              "Category": "Source",
              "Owner": "AWS",
              "Provider": "CodeStarSourceConnection",
              "Version": "1"
            },
            "RunOrder": 1,
            "Configuration": {
              "BranchName": {
                "Fn::Join": [
                  "-", [
                    "pipeline",
                    { "Ref": "AWS::AccountId" },
                  ]
                ]
              },
              "ConnectionArn": {
                "Ref": "CodePipelineSourceConnection"
              },
              "DetectChanges": "false",
              "FullRepositoryId": {
                "Ref": "GitHubRepositoryId"
              },
              "OutputArtifactFormat": "CODE_ZIP"
            },
            "OutputArtifacts": [{
              "Name": "SourceCode"
            }],
            "Region": {
              "Ref": "AWS::Region"
            }
          }]
        }, {
          "Name": "Deploy",
          "Actions": [{
            "Name": "Deploy",
            "ActionTypeId": {
              "Category": "Deploy",
              "Owner": "AWS",
              "Provider": "CodeDeployToECS",
              "Version": "1"
            },
            "RunOrder": 1,
            "Configuration": {
              "AppSpecTemplateArtifact": "SourceCode",
              "AppSpecTemplatePath": "appspec.yaml",
              "ApplicationName": {
                "Ref": "CodeDeployApplication"
              },
              "DeploymentGroupName": {
                "Fn::Join": [
                  "-", [
                    "DgpECS",
                    { "Ref": "ClusterName" },
                    { "Ref": "AWS::StackName" }
                  ]
                ]
              },
              "Image1ArtifactName": "NginxImage",
              "Image1ContainerName": "CONTAINER_IMAGE_NGINX",
              "Image2ArtifactName": "NodejsImage",
              "Image2ContainerName": "CONTAINER_IMAGE_NODEJS",
              "TaskDefinitionTemplateArtifact": "SourceCode",
              "TaskDefinitionTemplatePath": "taskdef.json"
            },
            "InputArtifacts": [{
              "Name": "NginxImage"
            }, {
              "Name": "SourceCode"
            }, {
              "Name": "NodejsImage"
            }],
            "Region": {
              "Ref": "AWS::Region"
            },
            "Namespace": "DeployVariables"
          }]
        }]
      }
    },
    "LogGroup": {
      "Type" : "AWS::Logs::LogGroup",
      "Properties" : {
        "LogGroupName" : "/ecs/xianbridal",
        "RetentionInDays" : 7
      }
    },
    "CodeDeployServiceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": {
          "Fn::Join": [
            "-", [
              "codedeploy",
              { "Ref": "AWS::StackName" },
              "service-role"
            ]
          ]
        },
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Sid": "",
            "Effect": "Allow",
            "Principal": {
              "Service": "codedeploy.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
          }]
        },
        "Description": "Allows CodeDeploy to read S3 objects, invoke Lambda functions, publish to SNS topics, and update ECS services on your behalf.",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/AWSCodeDeployRoleForECS"
        ],
        "MaxSessionDuration": 3600,
        "Path": "/"
      }
    },
    "CodeDeployApplication": {
      "Type": "AWS::CodeDeploy::Application",
      "DependsOn": [
        "ECSCluster",
        "ECSService"
      ],
      "Properties": {
        "ApplicationName": {
          "Fn::Join": [
            "-", [
              "AppECS",
              { "Ref": "ClusterName" },
              { "Ref": "AWS::StackName" }
            ]
          ]
        },
        "ComputePlatform": "ECS"
      }
    },
    "SNSTopic": {
      "Type" : "AWS::SNS::Topic",
      "Properties" : {
        "TopicName" : {
          "Ref": "AWS::StackName"
        },
        "DisplayName" : "",
        "Subscription" : [{
          "Endpoint" : "intai.hg@gmail.com",
          "Protocol" : "email"
        }]
      }
    },
    "NotificationCodeBuild": {
      "Type": "AWS::CodeStarNotifications::NotificationRule",
      "Properties": {
        "Name": {
          "Fn::Join": [
            "-", [
              { "Ref": "AWS::StackName" },
              "build-failed"
            ]
          ]
        },
        "DetailType": "BASIC",
        "EventTypeIds": [
          "codebuild-project-build-state-failed"
        ],
        "Resource": {
          "Fn::GetAtt": ["CodeBuild", "Arn"]
        },
        "Status": "ENABLED",
        "Targets": [{
          "TargetAddress": {
            "Ref": "SNSTopic"
          },
          "TargetType": "SNS"
        }]
      }
    },
    "NotificationCodePipeline": {
      "Type": "AWS::CodeStarNotifications::NotificationRule",
      "DependsOn": [
        "CodePipeline"
      ],
      "Properties": {
        "Name": {
          "Fn::Join": [
            "-", [
              { "Ref": "AWS::StackName" },
              "pipeline-failed"
            ]
          ]
        },
        "DetailType": "BASIC",
        "EventTypeIds": [
          "codepipeline-pipeline-pipeline-execution-failed"
        ],
        "Resource": {
          "Fn::Join": [
            ":", [
              "arn:aws:codepipeline",
              { "Ref": "AWS::Region" },
              { "Ref": "AWS::AccountId" },
              { "Ref": "AWS::StackName" }
            ]
          ]
        },
        "Status": "ENABLED",
        "Targets": [{
          "TargetAddress": {
            "Ref": "SNSTopic"
          },
          "TargetType": "SNS"
        }]
      }
    }
  }
}
